name: Test Automation CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  api-tests:
    name: 🔧 API Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: 📦 Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: 🔍 Lint backend code
      run: |
        cd backend
        npm run lint || true
        
    - name: 🧪 Run API tests
      run: |
        cd backend
        npm test
        
    - name: 📊 Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results-node-${{ matrix.node-version }}
        path: backend/coverage/

  ui-tests:
    name: 🎭 UI Tests
    runs-on: ubuntu-latest
    needs: api-tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install all dependencies
      run: |
        # Backend dependencies
        cd backend && npm ci && cd ..
        # Frontend dependencies  
        cd frontend && npm ci && cd ..
        
    - name: 🎭 Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps
        
    - name: 🚀 Start backend server
      run: |
        cd backend
        npm start &
        sleep 10
        
    - name: 🌐 Start frontend server
      run: |
        cd frontend
        npm start &
        sleep 15
        
    - name: 🔍 Health check
      run: |
        curl -f http://localhost:5000/api/health || exit 1
        curl -f http://localhost:3000 || exit 1
        
    - name: 🧪 Run UI tests
      run: |
        cd frontend
        npm run test:ui
        
    - name: 📊 Upload UI test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
          
    - name: 📸 Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-screenshots
        path: frontend/test-results/

  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        cd backend && npm ci && cd ..
        cd frontend && npm ci && cd ..
        
    - name: 🔨 Build backend
      run: |
        cd backend
        npm run build
        
    - name: 🔨 Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/build/

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: 🔍 Run npm audit (Backend)
      run: |
        cd backend
        npm audit --audit-level moderate || true
        
    - name: 🔍 Run npm audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level moderate || true

  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, build-test, security-scan]
    if: always()
    
    steps:
    - name: 📊 Check all jobs status
      run: |
        echo "API Tests: ${{ needs.api-tests.result }}"
        echo "UI Tests: ${{ needs.ui-tests.result }}"
        echo "Build Test: ${{ needs.build-test.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.api-tests.result }}" != "success" ]]; then
          echo "❌ API tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.build-test.result }}" != "success" ]]; then
          echo "❌ Build failed"
          exit 1
        fi
        
        echo "✅ All quality gates passed!"
        
    - name: 🎉 Success notification
      if: success()
      run: |
        echo "🚀 All tests passed! Ready for deployment."
        echo "📊 Test Results Summary:"
        echo "  ✅ API Tests: PASSED"
        echo "  ✅ UI Tests: PASSED" 
        echo "  ✅ Build: SUCCESS"
        echo "  ✅ Security: CHECKED"
